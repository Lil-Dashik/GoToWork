spring:
  datasource:
    url: ${POSTGRES_URL}
    username: ${POSTGRES_USERNAME}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  mvc:
    hiddenmethod:
      filter:
        enabled: true

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        id:
          new_generator_mappings: true
        dialect: org.hibernate.dialect.PostgreSQLDialect
  main:
    allow-bean-definition-overriding: true
  task:
    scheduling:
      pool:
        size: 5
  kafka:
    bootstrap-servers: kafka:9092
    consumer:
      group-id: crud-service-group
      auto-offset-reset: earliest
      key-deserializer:  org.apache.kafka.common.serialization.LongDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
      properties:
        spring.deserializer.value.delegate.class: org.springframework.kafka.support.serializer.JsonDeserializer
        spring.json.trusted.packages: '*'
        spring.json.value.default.type: project.dto.BotCommandDTO
    producer:
      key-serializer:  org.apache.kafka.common.serialization.LongSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
dadata:
  api:
    key: ${DADATA_KEY}
    secret: ${DADATA_SECRET}
TwoGis:
  api:
    key: ${TWOGIS_KEY}
management:
  endpoints:
    web:
      exposure:
        include: prometheus, metrics, health
  endpoint:
    prometheus:
      enabled: true
  metrics:
    enable:
      all: true